{# One JSON file per model #}

{% for type in types.based.Model|!protocol|annotated:"model"|!annotated:"ignoreJSONConvertible" %}
// sourcery:file:Models/{{ type.localName }}/{{ type.localName }}+JSONConvertible.generated.swift
import Vapor
import Fluent
{% if type.annotations.import %}
import {{ type.annotations.import }}
{% else %}
{% for var in type.annotations.imports %}
import {{ var }}
{% endfor %}
{% endif %}

extension {{ type.localName }}: JSONConvertible {
    internal enum JSONKeys {
        {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignoreJSONConvertible" %}
        static let {{ var.annotations.jsonKey|default:var.name }} = "{{ var.annotations.jsonKey|default:var.name }}"
        {% endfor %}
    }

    // MARK: - JSONConvertible ({{ type.name }})
    internal convenience init(json: JSON) throws {
        try self.init(
            {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignoreJSONConvertible"|!annotated:"ignoreJSONInitializable" %}
            {{ var.name }}: json.get(JSONKeys.{{ var.annotations.jsonKey|default:var.name }}){% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }

    internal func makeJSON() throws -> JSON {
        var json = JSON()

        try json.set({{ type.name }}.idKey, id)
        {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignoreJSONConvertible"|!annotated:"ignoreJSONRepresentable" %}
        try json.set(JSONKeys.{{ var.annotations.jsonKey|default:var.name }}, {{ var.annotations.jsonValue|default:var.name}})
        {% endfor %}

        return json
    }
}

extension {{ type.localName }}: ResponseRepresentable {}
// sourcery:end
{% endfor %}
