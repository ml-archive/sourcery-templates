{# One preparation file per model #}

{% for type in types.based.Model|!protocol|annotated:"model"|!annotated:"ignorePreparation" %}
// sourcery:file:Models/{{ type.localName }}/{{ type.localName }}+Preparation.generated.swift
import Vapor
import Fluent
{% if type.annotations.import %}
import {{ type.annotations.import }}
{% else %}
{% for var in type.annotations.imports %}
import {{ var }}
{% endfor %}
{% endif %}

extension {{ type.localName }}: Preparation {
    {{ type.accessLevel }} enum DatabaseKeys {
        static let id = {{ type.localName }}.idKey
        {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignorePreparation" %}
        static let {{ var.annotations.databaseKey|default:var.name }} = "{{ var.annotations.databaseKey|default:var.name }}"
        {% endfor %}
    }

    // MARK: - Preparations ({{ type.name }})
    {{ type.accessLevel }} static func prepare(_ database: Database) throws {
        try database.create(self) {
            $0.id()
            {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignorePreparation" %}
            $0.{% if var|annotated:"preparation" %}{{ var.annotations.preparation }}{% elif var.type.based.RawStringConvertible %}enum{% else %}{{ var.typeName.description|lowercase|replace:"?","" }}{% endif %}{% if var.annotations.preparation == "foreignId" %}(for: {{ var.annotations.foreignTable }}.self{% if var.isOptional %}, optional: true{% endif %}{% if var.annotations.unique %}, unique: {{ var.annotations.unique }}{% endif %}, foreignIdKey: {% if var.annotations.foreignIdKey %}"{{ var.annotations.foreignIdKey }}"{% else %}DatabaseKeys.{{ var.name }}{% if var.annotations.foreignKeyName %}, foreignKeyName: "{{ var.annotations.foreignKeyName }}"{% endif %}{% endif %}){% elif var.type.based.RawStringConvertible %}(DatabaseKeys.{% if var.annotations.databaseKey %}{{ var.annotations.databaseKey }}{% else %}{{ var.name }}{% endif %}, options: {{ var.typeName }}.allRaw){% else %}(DatabaseKeys.{% if var.annotations.databaseKey %}{{ var.annotations.databaseKey }}{% else %}{{ var.name }}{% endif %}{% if var.annotations.length %}, length: {{ var.annotations.length }}{% endif %}{% if var.annotations.type %}, type: "{{ var.annotations.type }}"{% endif %}{% if var.isOptional %}, optional: true{% endif %}{% if var.annotations.unique %}, unique: {{ var.annotations.unique }}{% endif %}){% endif %}
            {% endfor %}
        }

        {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignorePreparation"|annotated:"index" %}
        try database.index(DatabaseKeys.{{ var.annotations.databaseKey|default:var.name }}, for: {{ type.name }}.self)
        {% endfor %}
    }

    {{ type.accessLevel }} static func revert(_ database: Database) throws {
        try database.delete(self)
    }
}
// sourcery:end
{% endfor %}
