{# One row convertible file per model #}

{% for type in types.based.Model|!protocol|annotated:"model"|!annotated:"ignoreRowConvertible" %}
// sourcery:file:Models/{{ type.localName }}/{{ type.localName }}+RowConvertible.generated.swift
import Vapor
import Fluent

extension {{ type.localName }}: RowConvertible {
    // MARK: - RowConvertible ({{ type.name }})
    convenience {{ type.accessLevel }} init (row: Row) throws {
        try self.init(
            {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignoreRowConvertible" %}
            {{ var.name }}: row.get(DatabaseKeys.{{ var.annotations.databaseKey|default:var.name }}){% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }

    {{ type.accessLevel }} func makeRow() throws -> Row {
        var row = Row()

        {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignoreRowConvertible" %}
        try row.set(DatabaseKeys.{{ var.annotations.databaseKey|default:var.name }}, {{ var.name }})
        {% endfor %}

        return row
    }
}
// sourcery:end
{% endfor %}
