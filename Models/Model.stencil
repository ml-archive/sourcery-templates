{# Inline model generation #}

{% for type in types.based.Model|!protocol|annotated:"model" %}
    // sourcery:inline:auto:{{ type.name }}.Models
    let storage = Storage()

    {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignoreModel"|annotated:"enumName" %}
    enum {{ var.annotations.enumName }}: {{ var.annotations.enumType }}, RawStringConvertible {
        {% for case in var.annotations.enumCase %}
        case {{ case }}
        {% endfor %}

        static let all = [{% for case in var.annotations.enumCase %}{{ var.annotations.enumName }}.{{ case }}{% if not forloop.last %}, {% endif %}{% endfor %}]
        static let allDescription = {{ var.annotations.enumName }}.all.map { $0.rawValue }
    }
    {% endfor %}

    internal init(
        {% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignoreModel" %}
        {{ var.name }}: {{ var.typeName.description }}{% if var.isOptional %} = nil{% elif var.annotations.defaultInitValue %} = {{ var.annotations.defaultInitValue }}{% endif %}{% if not forloop.last %},{% endif %}
        {% endfor %}
    ) {
        {% for var in type.storedVariables|!annotated:"ignore" %}
        self.{{ var.name }} = {{ var.name }}
        {% endfor %}
    }
    // sourcery:end
{% endfor %}
