{# One Node file per model #}

{% for type in types.based.Model|!protocol|annotated:"model"|!annotated:"ignoreNodeRepresentable" %}
// sourcery:file:Models/{{ type.localName }}/{{ type.localName }}+NodeRepresentable.generated.swift

import Vapor
import Fluent
{% if type.annotations.import %}
import {{ type.annotations.import }}
{% else %}
{% for var in type.annotations.imports %}
import {{ var }}
{% endfor %}
{% endif %}

extension {{ type.localName }}: NodeRepresentable {
	internal enum NodeKeys: String {
		{% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignoreNode" %}
		case {% if var.annotations.nodeKey %}{{ var.annotations.nodeKey }}{% else %}{{ var.name }}{% endif %}
		{% endfor %}
	}

	// MARK: - NodeRepresentable ({{ type.name }})
	func makeNode(in context: Context?) throws -> Node {
		var node = Node([:])

		try node.set({{ type.name }}.idKey, id)
		{% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignoreNode" %}
		try node.set(NodeKeys.{% if var.annotations.nodeKey %}{{ var.annotations.nodeKey }}{% else %}{{ var.name }}{% endif %}.rawValue, {% if var.annotations.nodeValue %}{{ var.annotations.nodeValue }}{% else %}{{ var.name }}{% endif %})
		{% endfor %}
		{% if type.based.Timestampable %}
		try node.set({{ type.localName }}.createdAtKey, createdAt)
		try node.set({{ type.localName }}.updatedAtKey, updatedAt)
		{% endif %}

		return node
	}
}

// sourcery:end
{% endfor %}
